CHAPTER-1  Overview

Scope:
The document defines the syntax and semantics of the VHSIC Hardware Description Language (VHDL).
VHDL is designed for creating, verifying, synthesizing, and testing hardware designs.
It is both machine and human-readable, supporting communication and maintenance of hardware design data.

Purpose:
VHDL facilitates design and verification across the hardware lifecycle.
It serves implementers of VHDL-supporting tools and advanced users of the language.

Structure and Terminology:
Organized into clauses focusing on specific language aspects.
Syntax is described using a Backus-Naur Form (BNF) variant.
Includes mandatory rules (e.g., "shall") and optional recommendations ("should").
References to Property Specification Language (PSL) are included.

Word Usage:
Differentiates between mandatory ("shall"), recommended ("should"), permissible ("may"), and possible ("can") actions.

--------------------------------------------------------------------------------------------------------------------------------
CHAPTER-2 Normative References

IEEE 1076 Open Source Repository.
IEEE Std 754-2019 (Floating-Point Arithmetic).
IEEE Std 1850-2010 (Property Specification Language).
ISO/IEC standards like Latin alphabet encodings and the C programming language.

--------------------------------------------------------------------------------------------------------------------------------

CHAPTER-3: Design Entities and Configurations
This chapter focuses on how design entities and configurations are defined and used in VHDL, describing the hierarchical and modular structure of hardware designs.

3.1 General
Design Entity: A fundamental unit in VHDL that represents a portion of a hardware design with defined inputs, outputs, and functionality.
Hierarchy: Design entities can be nested, with a top-level entity encompassing sub-blocks. This modular approach creates a design hierarchy.
Configuration: Specifies how design entities are interconnected and bound together to form complete designs.

3.2 Entity Declarations
Defines the interface and some optional declarations for a design entity:
Includes an entity header (for defining inputs and outputs via ports and generics).
May have an entity declarative part (for declaring shared objects like types, constants, or signals).
May include an entity statement part for passive monitoring or validation using concurrent statements.

3.3 Architecture Bodies
Defines the internal implementation of a design entity
Relationship: Links the inputs and outputs of the entity, describing structure, dataflow, or behavior.
Multiple Architectures: An entity can have multiple architectures, each offering different implementations of the same interface.
Structure:
Declarative Part: Includes necessary declarations like signals, types, constants, and subprograms.
Statement Part: Contains concurrent statements to describe functionality.

3.4 Configuration Declarations
Defines how components within a design are bound to other entities or architectures:
Usage: Allows deferred binding to lower-level design entities or configurations.
Structure:
Includes the configuration declarative part (declarations shared across configurations).
Contains verification unit bindings and block configurations for binding components and blocks to their implementations.

--------------------------------------------------------------------------------------------------------------------------------

CHAPTER-4: Subprograms and Packages
This chapter elaborates on subprograms (procedures and functions) and packages, which are essential for modular and reusable design in VHDL.

4.1 General
Subprograms and packages allow for modular, reusable, and organized code.
Subprograms encapsulate functionality that can be reused, while packages group related declarations.

4.2 Subprogram Declarations
Defines how subprograms are declared:
Types:
Procedures: Perform actions but do not return a value.
Functions: Return a value of a specified type.
Parameters:
May be in, out, or inout.
Can be constants, signals, variables, or files.

4.3 Subprogram Bodies
Defines the implementation of a subprogram.
Contains statements that perform the functionality declared in the subprogram header.

4.4 Subprogram Instantiation
Allows the use of subprograms defined in external libraries or packages.
Useful for leveraging pre-built functionality.

4.5 Subprogram Overloading
Enables multiple subprograms with the same name but different parameter types or numbers.
The compiler determines the correct subprogram based on the argument types during usage.

4.6 Resolution Functions
Special functions used to resolve signals with multiple drivers.
Typically used in bus architectures or cases with signal contention.

4.7 Package Declarations
Packages group related declarations.
Structure:
Package Header: Lists declarations visible to users of the package.
Package Body: Contains subprogram implementations and private declarations.

4.8 Package Instantiation
Allows packages to be instantiated and used in different parts of a design.
Promotes code reuse across multiple modules or designs.

4.9 Conformance Rules
Specifies how subprograms and packages conform to declarations.
Ensures compatibility between headers and bodies, and proper usage of packages.

--------------------------------------------------------------------------------------------------------------------------------

CHAPTER-5: Types
This chapter focuses on defining and using data types in VHDL, which are fundamental to describing and manipulating hardware constructs.

5.1 General
Data Types: Define the nature of objects (signals, variables, or constants) and specify their valid values and operations.
Categories: VHDL supports scalar, composite, access, file, protected, and other specialized types.

5.2 Scalar Types
Scalar types represent single, indivisible values:
Integer: Represents whole numbers within a specified range.
Real: Represents floating-point numbers.
Enumerations: Define a list of named values
Physical Types: Include units

5.3 Composite Types
Composite types group multiple elements:
Arrays: Collections of elements of the same type.
Unconstrained arrays: Size defined at object declaration (e.g., array (1 to N)).
Constrained arrays: Fixed size (e.g., array (1 to 10)).
Records: Group elements of different types (e.g., type Packet is record Header: Bit; Data: Integer; end record).

5.4 Access Types
Provide dynamic memory allocation for objects.
Allow pointers to values of a specified type.

5.5 File Types
Facilitate file input and output.
Example: Reading stimulus data or logging simulation results.

5.6 Protected Types
Enable encapsulation of data and methods for controlled access.
Often used in concurrent processes to manage shared resources safely.

5.7 String Representations
Strings are arrays of characters.
Commonly used for textual data or file manipulation.

5.8 Unspecified Types
Allow placeholders for data types to be defined later.
Useful in generic subprograms or templates.

--------------------------------------------------------------------------------------------------------------------------------

CHAPTER-6: Declarations
This chapter explains the concept of declarations in VHDL, which define objects, types, subprograms, and other entities to be used within a design.

6.1 General
Declarations: Introduce and define entities in a VHDL design.
Visibility: Declarations are visible within the scope where they are defined, and sometimes in nested scopes.

6.2 Type Declarations
Define new data types or modify existing ones.
Includes scalar types (e.g., integer, enumeration), composite types (e.g., arrays, records), access types, and file types.

6.3 Subtype Declarations
Define a subtype as a constrained version of an existing type.
Example: subtype Small_Int is Integer range 1 to 10;

6.4 Objects
Objects represent data within a design:
Constants: Immutable values.
Variables: Temporary storage within processes.
Signals: Values that can be shared across concurrent parts of the design.
Files: Associated with external files for I/O operations.
Shared Variables: Accessible by multiple processes.

6.5 Interface Declarations
Define parameters for subprograms, components, and blocks:
Modes:
in: Input-only.
out: Output-only.
inout: Bidirectional.
Generics and Ports: Allow parameterization and communication in entity declarations.

6.6 Alias Declarations
Create alternative names for objects, types, or subprograms.
Example: alias Bit_Vector is std_logic_vector;

6.7 Attribute Declarations
Define additional information about objects or entities.
Attributes can be predefined (e.g., 'range, 'length) or user-defined.

6.8 Component Declarations
Specify reusable components in a design.
Example: component Full_Adder is port (...); end component;

6.9 Group Template and Group Declarations
Group related entities for modularity and convenience.
Useful in complex designs with repetitive patterns.

6.10 PSL (Property Specification Language) Declarations
Incorporate PSL for formal verification.
Include properties, sequences, and clock declarations.

--------------------------------------------------------------------------------------------------------------------------------

Chapter 7: Specifications
This chapter discusses specifications in VHDL, which describe how certain features or aspects of a design are defined and controlled. Specifications allow customization, configuration, and detailed control of design behavior.

7.1 General
Specifications: Define additional details about design elements to enhance clarity, control, or customization.
Provide mechanisms to associate attributes, configure components, disconnect signals, and more.

7.2 Attribute Specification
Purpose: Assign values to attributes of objects, signals, or entities.
Predefined Attributes: Include 'range, 'length, 'event, etc.
User-defined Attributes: Allow custom information to be associated with design elements.

7.3 Configuration Specification
Defines the binding of component instances to design entities or architectures.
Use Cases:
Select a specific implementation of a component.
Allow flexible reuse of components with different configurations.

7.4 Disconnection Specification
Controls how signals are disconnected under specific conditions, especially for resolved signals with multiple drivers.

--------------------------------------------------------------------------------------------------------------------------------